"use client";
/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.13 .\logo.gltf --transform 
Files: .\logo.gltf [3.39MB] > logo-transformed.glb [135.36KB] (96%)
*/

import React, { useLayoutEffect, useRef } from "react";
import {
  useGLTF,
  OrthographicCamera,
  MeshTransmissionMaterial,
  useScroll,
} from "@react-three/drei";
import { useFrame, useThree } from "@react-three/fiber";
import { MeshStandardMaterial } from "three";
import gsap from "gsap";
import { ScrollTrigger } from "gsap/all";

export default function Logo({ scale, homeRef }) {
  const { nodes, materials } = useGLTF("/logo-transformed.glb");
  const ref = useRef();
  const tl = useRef();
  const { viewport } = useThree();
  const { width, height } = viewport;

  const scroll = useScroll();

  // useFrame((state, delta) => {
  //   tl.current.seek(scroll.offset * tl.current.duration());
  // });

  useLayoutEffect(() => {
    const ctx = gsap.context(() => {
      gsap.registerPlugin(ScrollTrigger);

      gsap.from(ref.current.rotation, {
        x: 0,
        y: 3,
        z: 0,
        duration: 1,
        delay: 0.5,
        ease: "none",
      });

      tl.current = gsap.timeline({
        scrollTrigger: {
          trigger: homeRef.current,
          start: "top top",
          end: "bottom top",
          scrub: true,
          // markers: true,
        },
      });

      tl.current
        .to(ref.current.scale, {
          x: 0,
          y: 0,
          z: 0,
          duration: 2,
          ease: "none",
        })
        .to(
          ref.current.position,
          {
            x: 0,
            y: 100,
            z: 0,
            duration: 2,
            ease: "none",
          },
          "<"
        );

      // tl.current
      //   .to(ref.current.position, {
      //     x: -3,
      //     y: 11,
      //     duration: 2,
      //     ease: "none",
      //   })
      //   .to(
      //     ref.current.rotation,
      //     {
      //       x: 0,
      //       y: 10,
      //       z: 0,
      //       duration: 2,
      //       ease: "none",
      //     },
      //     "<"
      //   );
    }, ref);

    return () => ctx.revert();
  }, []);
  return (
    <group
      ref={ref}
      position={[0, height * 1.25, 0]}
      scale={scale}
      dispose={null}
    >
      {/* <OrthographicCamera
        makeDefault={false}
        far={100000}
        near={0}
        position={[-0.002, -2.792, 9.654]}
        rotation={[-0.058, 0.009, 0.001]}
        scale={0.01}
      /> */}
      <mesh
        geometry={nodes.Shape_3.geometry}
        position={[-0.457, -3.049, -0.555]}
        scale={0.011}
      >
        {/* <meshStandardMaterial
          color="black"
          emissive={"#F12271"}
          emissiveIntensity={1.5}
          roughness={0.01}
          metalness={0.2}
        /> */}
        <meshStandardMaterial color={"black"} metalness={0.1} roughness={0.4} />
      </mesh>
    </group>
  );
}

useGLTF.preload("/logo-transformed.glb");
